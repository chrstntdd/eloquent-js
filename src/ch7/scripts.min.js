/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);

/***/ },
/* 1 */
/***/ function(module, exports) {

	// test: no
	
	(function() {
	  "use strict";
	
	  var active = null;
	
	  function Animated(world) {
	    this.world = world;
	    var outer = (window.__sandbox ? window.__sandbox.output.div : document.body), doc = outer.ownerDocument;
	    var node = outer.appendChild(doc.createElement("div"));
	    node.style.cssText = "position: relative; width: intrinsic; width: fit-content;";
	    this.pre = node.appendChild(doc.createElement("pre"));
	    this.pre.appendChild(doc.createTextNode(world.toString()));
	    this.button = node.appendChild(doc.createElement("div"));
	    this.button.style.cssText = "position: absolute; bottom: 8px; right: -4.5em; color: white; font-family: tahoma, arial; " +
	      "background: #4ab; cursor: pointer; border-radius: 18px; font-size: 70%; width: 3.5em; text-align: center;";
	    this.button.innerHTML = "stop";
	    var self = this;
	    this.button.addEventListener("click", function() { self.clicked(); });
	    this.disabled = false;
	    if (active) active.disable();
	    active = this;
	    this.interval = setInterval(function() { self.tick(); }, 333);
	  }
	
	  Animated.prototype.clicked = function() {
	    if (this.disabled) return;
	    if (this.interval) {
	      clearInterval(this.interval);
	      this.interval = null;
	      this.button.innerHTML = "start";
	    } else {
	      var self = this;
	      this.interval = setInterval(function() { self.tick(); }, 333);
	      this.button.innerHTML = "stop";
	    }
	  };
	
	  Animated.prototype.tick = function() {
	    this.world.turn();
	    this.pre.removeChild(this.pre.firstChild);
	    this.pre.appendChild(this.pre.ownerDocument.createTextNode(this.world.toString()));
	  };
	
	  Animated.prototype.disable = function() {
	    this.disabled = true;
	    clearInterval(this.interval);
	    this.button.innerHTML = "Disabled";
	    this.button.style.color = "red";
	  };
	
	  window.animateWorld = function(world) { new Animated(world); };
	})();

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ch6_ex_1 = __webpack_require__(3);
	var directions = {
	    'n': new ch6_ex_1.Vector(0, 1),
	    'ne': new ch6_ex_1.Vector(1, -1),
	    'e': new ch6_ex_1.Vector(1, 0),
	    'se': new ch6_ex_1.Vector(0, -1),
	    's': new ch6_ex_1.Vector(0, 1),
	    'sw': new ch6_ex_1.Vector(-1, 1),
	    'w': new ch6_ex_1.Vector(-1, 0),
	    'nw': new ch6_ex_1.Vector(-1, -1)
	};
	var plan = ['############################',
	    '#      #    #      o      ##',
	    '#                          #',
	    '#          #####           #',
	    '##         #   #    ##     #',
	    '###           ##     #     #',
	    '#           ###      #     #',
	    '#   ####                   #',
	    '#   ##       o             #',
	    '# o  #         o       ### #',
	    '#    #                     #',
	    '############################'];
	var directionNames = 'n ne e se s sw w nw'.split(' ');
	function randomElement(array) {
	    return array[Math.floor(Math.random() * array.length)];
	}
	var Grid = (function () {
	    function Grid(width, height) {
	        this.space = new Array(width * height);
	        this.width = width;
	        this.height = height;
	    }
	    Grid.prototype.isInside = function (vector) {
	        return vector.x >= 0 && vector.x < this.width &&
	            vector.y >= 0 && vector.y < this.height;
	    };
	    ;
	    Grid.prototype.get = function (vector) {
	        return this.space[vector.x + this.width * vector.y];
	    };
	    ;
	    Grid.prototype.set = function (vector, value) {
	        this.space[vector.x + this.width * vector.y] = value;
	    };
	    ;
	    Grid.prototype.forEach = function (f, context) {
	        for (var y = 0; y < this.height; y++) {
	            for (var x = 0; x < this.width; x++) {
	                var value = this.space[x + y * this.width];
	                if (value != null)
	                    f.call(context, value, new ch6_ex_1.Vector(x, y));
	            }
	        }
	    };
	    ;
	    return Grid;
	}());
	function elementFromChar(legend, ch) {
	    if (ch == ' ')
	        return null;
	    var element = new legend[ch]();
	    element.originChar = ch;
	    return element;
	}
	function charFromElement(element) {
	    if (element == null)
	        return ' ';
	    else
	        return element.originChar;
	}
	function Wall() { }
	;
	var BouncingCritter = (function () {
	    function BouncingCritter(direction) {
	        this.direction = randomElement(directionNames);
	    }
	    BouncingCritter.prototype.act = function (view) {
	        if (view.look(this.direction) != ' ') {
	            this.direction = view.find(' ') || 's';
	        }
	        return { type: 'move', direction: this.direction };
	    };
	    return BouncingCritter;
	}());
	var World = (function () {
	    function World(map, legend) {
	        var grid = new Grid(map[0].length, map.length);
	        this.grid = grid;
	        this.legend = legend;
	        this.map = map.forEach(function (line, y) {
	            for (var x = 0; x < line.length; x++)
	                grid.set(new ch6_ex_1.Vector(x, y), elementFromChar(legend, line[x]));
	        });
	    }
	    ;
	    World.prototype.toString = function () {
	        var output = '';
	        for (var y = 0; y < this.grid.height; y++) {
	            for (var x = 0; x < this.grid.width; x++) {
	                var element = this.grid.get(new ch6_ex_1.Vector(x, y));
	                output += charFromElement(element);
	            }
	            output += '\n';
	        }
	        return output;
	    };
	    ;
	    World.prototype.turn = function () {
	        var acted = [];
	        this.grid.forEach(function (critter, vector) {
	            if (critter.act && acted.indexOf(critter) == -1) {
	                acted.push(critter);
	                this.letAct(critter, vector);
	            }
	        }, this);
	    };
	    ;
	    World.prototype.letAct = function (critter, vector) {
	        var action = critter.act(new View(this, vector));
	        if (action && action.type == 'move') {
	            var dest = this.checkDestination(action, vector);
	            if (dest && this.grid.get(dest) == null) {
	                this.grid.set(vector, null);
	                this.grid.set(dest, critter);
	            }
	        }
	    };
	    ;
	    World.prototype.checkDestination = function (action, vector) {
	        if (directions.hasOwnProperty(action.direction)) {
	            var dest = vector.plus(directions[action.direction]);
	            if (this.grid.isInside(dest))
	                return dest;
	        }
	    };
	    ;
	    return World;
	}());
	var View = (function () {
	    function View(world, vector) {
	        this.world = world;
	        this.vector = vector;
	    }
	    View.prototype.look = function (dir) {
	        var target = this.vector.plus(directions[dir]);
	        if (this.world.grid.isInside(target))
	            return charFromElement(this.world.grid.get(target));
	        else
	            return '#';
	    };
	    ;
	    View.prototype.findAll = function (ch) {
	        var found = [];
	        for (var dir in directions)
	            if (this.look(dir) == ch)
	                found.push(dir);
	        return found;
	    };
	    ;
	    View.prototype.find = function (ch) {
	        var found = this.findAll(ch);
	        if (found.length == 0)
	            return null;
	        return randomElement(found);
	    };
	    ;
	    return View;
	}());
	function dirPlus(dir, n) {
	    var index = directionNames.indexOf(dir);
	    return directionNames[(index + n + 8) % 8];
	}
	var WallFlower = (function () {
	    function WallFlower(dir) {
	        this.dir = 's';
	    }
	    ;
	    WallFlower.prototype.act = function (view) {
	        var start = this.dir;
	        if (view.look(dirPlus(this.dir, -3)) != ' ')
	            start = this.dir = dirPlus(this.dir, -2);
	        while (view.look(this.dir) != ' ') {
	            this.dir = dirPlus(this.dir, 1);
	            if (this.dir == start)
	                break;
	        }
	        return { type: 'move', direction: this.dir };
	    };
	    ;
	    return WallFlower;
	}());
	var LifelikeWorld = (function (_super) {
	    __extends(LifelikeWorld, _super);
	    function LifelikeWorld(map, legend) {
	        _super.call(this, map, legend);
	        World.call(this, map, legend);
	        Object.create(World);
	    }
	    LifelikeWorld.prototype.letAct = function (critter, vector) {
	        var action = critter.act(new View(this, vector));
	        var handled = action &&
	            action.type in actionTypes &&
	            actionTypes[action.type].call(this, critter, vector, action);
	        if (!handled) {
	            critter.energy -= 0.2;
	            if (critter.energy <= 0)
	                this.grid.set(vector, null);
	        }
	    };
	    ;
	    return LifelikeWorld;
	}(World));
	var actionTypes = Object.create(null);
	actionTypes.grow = function (critter) {
	    critter.energy += 0.5;
	    return true;
	};
	actionTypes.move = function (critter, vector, action) {
	    var dest = this.checkDestination(action, vector);
	    if (dest == null || critter.energy <= 1 || this.grid.get(dest) != null)
	        return false;
	    critter.energy -= 1;
	    this.grid.set(vector, null);
	    this.grid.set(dest, critter);
	    return true;
	};
	actionTypes.eat = function (critter, vector, action) {
	    var dest = this.checkDestination(action, vector);
	    var atDest = dest != null && this.grid.get(dest);
	    if (!atDest || atDest.energy == null)
	        return false;
	    critter.energy += atDest.energy;
	    this.grid.set(dest, null);
	    return true;
	};
	actionTypes.reproduce = function (critter, vector, action) {
	    var baby = elementFromChar(this.legend, critter.originChar);
	    var dest = this.checkDestination(action, vector);
	    if (dest == null || critter.energy <= 2 * baby.energy || this.grid.get(dest) != null)
	        return false;
	    critter.energy -= 2 * baby.energy;
	    this.grid.set(dest, baby);
	    return true;
	};
	var Plant = (function () {
	    function Plant(energy) {
	        this.energy = 3 + Math.random() * 4;
	    }
	    Plant.prototype.act = function (view) {
	        if (this.energy > 15) {
	            var space = view.find(' ');
	            if (space)
	                return { type: 'reproduce', direction: space };
	        }
	        if (this.energy < 20)
	            return { type: 'grow', direction: undefined };
	    };
	    ;
	    return Plant;
	}());
	var PlantEater = (function () {
	    function PlantEater(energy) {
	        this.energy = 20;
	    }
	    PlantEater.prototype.act = function (view) {
	        var space = view.find(' ');
	        if (this.energy > 60 && space) {
	            return { type: 'reproduce', direction: space };
	        }
	        var plant = view.find('*');
	        if (plant) {
	            return { type: 'eat', direction: plant };
	        }
	        if (space) {
	            return { type: 'move', direction: space };
	        }
	    };
	    ;
	    return PlantEater;
	}());
	// var valley = new LifelikeWorld(
	//   ['############################',
	//    '#####                 ######',
	//    '##   ***                **##',
	//    '#   *##**         **  O  *##',
	//    '#    ***     O    ##**    *#',
	//    '#       O         ##***    #',
	//    '#                 ##**     #',
	//    '#   O       #*             #',
	//    '#*          #**       O    #',
	//    '#***        ##**    O    **#',
	//    '##****     ###***       *###',
	//    '############################'],
	//   {'#': Wall,
	//    'O': PlantEater,
	//    '*': Plant}
	// );
	// animateWorld(valley);
	///////////////////////////////////////////////////////////////////////
	//Problem 1
	var SmartPlantEater = (function () {
	    function SmartPlantEater(energy, dir) {
	        this.energy = 20;
	        this.dir = randomElement(directionNames);
	    }
	    SmartPlantEater.prototype.act = function (view) {
	        var space = view.find(' ');
	        var plants = view.findAll('*');
	        if (this.energy > 95 && space)
	            return { type: 'reproduce', direction: space };
	        if (plants.length > 1)
	            return { type: 'eat', direction: randomElement(plants) };
	        if (view.look(this.dir) != ' ' && space)
	            this.dir = space;
	        return { type: 'move', direction: this.dir };
	    };
	    ;
	    return SmartPlantEater;
	}());
	// animateWorld(new LifelikeWorld(
	//   ['############################',
	//    '#####                 ######',
	//    '##   ***                **##',
	//    '#   *##**         **  O  *##',
	//    '#    ***     O    ##**    *#',
	//    '#       O         ##***    #',
	//    '#                 ##**     #',
	//    '#   O       #*             #',
	//    '#*          #**       O    #',
	//    '#***        ##**    O    **#',
	//    '##****     ###***       *###',
	//    '############################'],
	//   {'#': Wall,
	//    'O': SmartPlantEater,
	//    '*': Plant}
	// ));
	//PROBLEM 2
	actionTypes.stay = function (critter, vector, action) {
	    return false;
	};
	var Tiger = (function () {
	    function Tiger(energy, dir, memory) {
	        this.energy = 90;
	        this.dir = randomElement(directionNames);
	        this.memory = []; //holds count of number of prey around predator each turn.
	    }
	    Tiger.prototype.act = function (view) {
	        var seenEachTurn = this.memory.reduce(function (a, b) { return a + b; }, 0) / this.memory.length;
	        var prey = view.findAll('O');
	        var space = view.find(' ');
	        this.memory.push(prey.length);
	        if (this.memory.length > 5)
	            this.memory.shift();
	        if (prey.length && seenEachTurn > 0.33)
	            return { type: 'eat', direction: randomElement(prey) };
	        if (seenEachTurn < 0.10)
	            return { type: 'stay', direction: undefined };
	        if (this.energy > 300 && space)
	            return { type: 'reproduce', direction: space };
	        if (view.look(this.dir) != ' ' && space)
	            this.dir = space;
	        return { type: 'move', direction: this.dir };
	    };
	    ;
	    return Tiger;
	}());
	animateWorld(new LifelikeWorld(['####################################################',
	    '#                 ####         ****              ###',
	    '#   *  @  ##                 ########       OO    ##',
	    '#   *    ##        O O                 ****       *#',
	    '#       ##*                        ##########     *#',
	    '#      ##***  *         ****                     **#',
	    '#* **  #  *  ***      #########                  **#',
	    '#* **  #      *               #   *              **#',
	    '#     ##              #   O   #  ***          ######',
	    '#*            @       #       #   *        O  #    #',
	    '#*                    #  ######                 ** #',
	    '###          ****          ***                  ** #',
	    '#       O                        @         O       #',
	    '#   *     ##  ##  ##  ##               ###      *  #',
	    '#   **         #              *       #####  O     #',
	    '##  **  O   O  #  #    ***  ***        ###      ** #',
	    '###               #   *****                    ****#',
	    '####################################################'], { '#': Wall,
	    '@': Tiger,
	    'O': SmartPlantEater,
	    '*': Plant }));


/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	//PROBLEM 1 /////////////////////////////////////////////////////////////////////////////
	var Vector = (function () {
	    function Vector(x, y) {
	        this.x = x;
	        this.y = y;
	    }
	    Vector.prototype.plus = function (alt) {
	        return new Vector(this.x + alt.x, this.y + alt.y);
	    };
	    Vector.prototype.minus = function (alt) {
	        return new Vector(this.x - alt.x, this.y - alt.y);
	    };
	    Object.defineProperty(Vector.prototype, "length", {
	        get: function () {
	            return Math.sqrt((this.x * this.x) + (this.y * this.y));
	        },
	        enumerable: true,
	        configurable: true
	    });
	    return Vector;
	}());
	exports.Vector = Vector;
	//console.log(new Vector(1, 2).plus(new Vector(2, 3)));
	// → Vector{x: 3, y: 5}
	//console.log(new Vector(1, 2).minus(new Vector(2, 3)));
	// → Vector{x: -1, y: -1}
	//console.log(new Vector(3, 4).length);
	// → 5
	//PROBLEM 2 /////////////////////////////////////////////////////////////////////////////
	//from textbook.
	function repeat(string, times) {
	    var result = '';
	    for (var i = 0; i < times; i++)
	        result += string;
	    return result;
	}
	//inferred from textbook.
	//minWidth and minHeight methods have been altered from original code.
	var TextCell = (function () {
	    function TextCell(text) {
	        this.text = text.split('');
	    }
	    TextCell.prototype.minWidth = function () {
	        return this.text.length;
	    };
	    TextCell.prototype.minHeight = function () {
	        return 1;
	    };
	    TextCell.prototype.draw = function (width, height) {
	        var result = [];
	        for (var i = 0; i < height; i++) {
	            var line = this.text[i] || '';
	            result.push(line + repeat(' ', width - line.length));
	        }
	        return result;
	    };
	    return TextCell;
	}());
	var StretchCell = (function (_super) {
	    __extends(StretchCell, _super);
	    function StretchCell(text, width, height) {
	        _super.call(this, text);
	        this.width = width;
	        this.height = height;
	    }
	    StretchCell.prototype.minWidth = function () {
	        return Math.max(this.width, _super.prototype.minWidth.call(this));
	    };
	    StretchCell.prototype.minHeight = function () {
	        return Math.max(this.height, _super.prototype.minHeight.call(this));
	    };
	    StretchCell.prototype.draw = function (width, height) {
	        return _super.prototype.draw.call(this, this.width, this.height);
	    };
	    return StretchCell;
	}(TextCell));
	var sc = new StretchCell('abc', 1, 2);
	//console.log(sc.minWidth());
	// → 3
	//console.log(sc.minHeight());
	// → 2
	//console.log(sc.draw(3, 2));
	// draw method inherited from text. Output doesn't pass test. ¯\_(ツ)_/¯ 
	// → ['abc', '   ']
	//PROBLEM 3 /////////////////////////////////////////////////////////////////////////////
	function logFive(seq) {
	    for (var i = 0; i < 5; i++) {
	        if (!seq.next()) {
	            break;
	        }
	        console.log(seq.current());
	    }
	}
	var ArraySeq = (function () {
	    function ArraySeq(array) {
	        this.pos = -1;
	        this.array = array;
	    }
	    ArraySeq.prototype.next = function () {
	        if (this.pos >= this.array.length - 1) {
	            return false;
	        }
	        this.pos++;
	        return true;
	    };
	    ArraySeq.prototype.current = function () {
	        return this.array[this.pos];
	    };
	    return ArraySeq;
	}());
	//using start and end instead of from and to arguments.
	var RangeSeq = (function () {
	    function RangeSeq(start, end) {
	        this.pos = start - 1;
	        this.end = end;
	    }
	    RangeSeq.prototype.next = function () {
	        if (this.pos >= this.end) {
	            return false;
	        }
	        this.pos++;
	        return true;
	    };
	    RangeSeq.prototype.current = function () {
	        return this.pos;
	    };
	    return RangeSeq;
	}());
	//logFive(new ArraySeq([1, 2]));
	// → 1
	// → 2
	//logFive(new RangeSeq(100, 1000));
	// → 100
	// → 101
	// → 102
	// → 103
	// → 104


/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,